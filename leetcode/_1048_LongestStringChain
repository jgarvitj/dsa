class Solution {
    public int longestStrChain(String[] words) {
        
        if(words.length < 2) {
            return words.length;
        }
        
        //Arrays.sort(words, (a,b)-> Integer.compare(a.length(), b.length()));
        
        Arrays.sort(words, (a,b)->a.length() - b.length());
        
        HashMap<String, Integer> mem = new HashMap<>();
        int max_len = 0;
        
        for(String word : words) {
            
            int max_depth = 0;
            
            for(int i = 0; i < word.length(); i++) {
                String pre = word.substring(0, i) + word.substring(i+1);
                max_depth = Math.max(max_depth, mem.getOrDefault(pre, 0)  + 1);
            }
            
            mem.put(word, max_depth);
            max_len = Math.max(max_len, max_depth);
        }
                
        return max_len;
    }
}
