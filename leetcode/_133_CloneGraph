/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        
        if(node == null) {
            return null;
        }
        
        Queue<Node> q = new LinkedList<>();
        q.add(node);
        
        // HashMap <org,copy>
        HashMap<Node, Node> isVis = new HashMap<>();

        isVis.put(node, new Node(node.val, new ArrayList() ));
        
        while(!q.isEmpty()) {
            
            Node curOrg = q.poll();
            
            for(Node neighbor : curOrg.neighbors) {
                
                if(!isVis.containsKey(neighbor)) {
                    isVis.put(neighbor, new Node(neighbor.val, new ArrayList<>()));
                    
                    q.add(neighbor);
                    
                }
                isVis.get(curOrg).neighbors.add(isVis.get(neighbor));
            }
        }
        
        return isVis.get(node);
    }
}
