class Solution {
    
    private boolean dfs(int index, int[] leftChild, int[] rightChild, int[] isVis) {
        
        if(leftChild[index] != -1) {
            int left = leftChild[index];
            if(isVis[left] == 1) {
                return false;
            }
            isVis[left] = 1;
            if(!dfs(left, leftChild, rightChild, isVis)) {
                return false;
            }
        }
        if(rightChild[index] != -1) {
            int right = rightChild[index];
            if(isVis[right] == 1) {
                return false;
            }
            isVis[right] = 1;
            if(!dfs(right, leftChild, rightChild, isVis)) {
                return false;
            }
        }
        return true;
    }
    
    
    public boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
        
        if(n == 0) {
            return true;
        }
        
        if(n == 1) {
            if(leftChild[0] == -1 && rightChild[0] == -1)
                return true;
            return false;
        }
        
        int[] isVis = new int[n];
        
        int root = -1;
        HashSet<Integer> hasParent = new HashSet<>();
        for(int i = 0; i < n; i++) {
            if(leftChild[i] != -1) {
                if(hasParent.contains(leftChild[i])) {
                    return false;
                }
                hasParent.add(leftChild[i]);
            }
            if(rightChild[i] != -1) {
                if(hasParent.contains(rightChild[i])) {
                    return false;
                }
                hasParent.add(rightChild[i]);
            }
        }
        
        for(int i = 0; i < n; i++) {
            if(!hasParent.contains(i) && (leftChild[i] != -1 || rightChild[i] != -1)) {
                root = i;
                break;
            }
        }
        
        if(root == -1) {
            return false;
        }
        
        if(!dfs(root, leftChild, rightChild, isVis)) {
            return false;
        }
        
        isVis[root] = 1;
        
        for(int i = 0; i < n; i++) {
            if(isVis[i] != 1 && (leftChild[i] != -1 || rightChild[i] != -1)) {
                return false;
            }
        }
        return true;
        
    }
}
