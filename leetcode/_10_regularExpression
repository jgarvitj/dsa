class Solution {

    class RegexUnit {
        char regexChar;
        int validity;
        int pIndex;
        boolean skipEnabled;

        public RegexUnit(int validity) {
            this.validity = validity;
            this.skipEnabled = false;
        }

        public RegexUnit(char regexChar, int validity, int pIndex) {
            this.validity = validity;
            this.regexChar = regexChar;
            this.pIndex = pIndex;
            this.skipEnabled = false;
        }
	public RegexUnit(char regexChar, int validity, int pIndex, boolean skipEnabled) {
		this.validity = validity;
		this.regexChar = regexChar;
		this.pIndex = pIndex;
		this.skipEnabled = skipEnabled;
	}
    }

    private RegexUnit parseP(String p, int pIndex) {

        int size = p.length();
        if(pIndex >= size) {
            return new RegexUnit(-1);
        } else {
            char regexChar = p.charAt(pIndex);
            if(pIndex + 1 < size) {
                char validityChecker = p.charAt(pIndex + 1);
                if(validityChecker == '*') {
                    return new RegexUnit(regexChar, 20, pIndex + 2, true);
                } 
            }
            return new RegexUnit(regexChar, 1, pIndex + 1);
        }

    }


    public boolean isMatch(String s, String p) {


        //keep a function to parse p
        //return null if p is spent
        //this will return an obj with a char and validity
        int pIndex = 0;
        
        //keep parsing s, based on response from parseP
        RegexUnit unit = parseP(p, pIndex);
        pIndex = unit.pIndex;
        for(int i = 0; i < s.length(); i++) {
            if(unit.validity == -1) {
                return false;
            } else {
                if(unit.regexChar == s.charAt(i) || unit.regexChar == '.') {
                    unit.validity --;
                    if(unit.validity == 0) {
                        unit = parseP(p, pIndex);
                        pIndex = unit.pIndex;
                    }
                } else if (unit.skipEnabled) {
			unit = parseP(p, pIndex);
			pIndex = unit.pIndex;
			i--;
		}
            }
        }
        return true;

        
    }
}
